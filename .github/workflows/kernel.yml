name: Build Kernel

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  Read-configuration:
    name: 🐂 Parse *.config.json
    runs-on: ubuntu-latest
    outputs:
      CONFIGS: ${{ steps.generate-matrix.outputs.CONFIGS }}
      BUILD_DATE: ${{ steps.generate-builddate.outputs.BUILDDATE }}
    steps:
      - name: 😄 Checkout
        uses: actions/checkout@v4

      - name: 😆 Generate Matrix
        id: generate-matrix
        run: |
          configs=$(jq -c -s '[.[][]]' Kernel/configs/*.config.json)
          echo "CONFIGS=$configs" >> "$GITHUB_OUTPUT"

      - name: Debug generated matrix JSON
        run: echo "${{ steps.generate-matrix.outputs.CONFIGS }}"

      - name: ⏰ Set builddate
        id: generate-builddate
        run: echo "BUILDDATE=$(date +'%Y%m%d')" >> "$GITHUB_OUTPUT"

  Build-Kernel:
    name: 🛠️ Build ${{ matrix.CONFIG.kernelSource.name }}
    runs-on: ubuntu-latest
    needs: Read-configuration
    strategy:
      max-parallel: 4
      fail-fast: false
      matrix:
        CONFIG: ${{ fromJSON(needs.Read-configuration.outputs.CONFIGS) }}
    env:
      BUILD_DATE: "${{ needs.Read-configuration.outputs.BUILD_DATE }}"
      KERNEL_NAME: "${{ matrix.CONFIG.kernelSource.name }}"
      ARCH: "${{ matrix.CONFIG.arch }}"
      OUT_DIR: out
      ENABLE_CCACHE: "${{ matrix.CONFIG.enableCache }}"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install prerequisites
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential bc bison flex libssl-dev \
            libncurses5-dev ccache lzop curl zip unzip jq

      - name: Enable ccache
        if: ${{ env.ENABLE_CCACHE && env.ENABLE_CCACHE == 'true' }}
        run: |
          echo "CCACHE_DIR=${{ github.workspace }}/.ccache" >> "$GITHUB_ENV"
          export PATH="/usr/lib/ccache:$PATH"

      - name: Cache ccache
        if: ${{ env.ENABLE_CCACHE && env.ENABLE_CCACHE == 'true' }}
        uses: actions/cache@v4
        with:
          path: .ccache
          key: ccache-${{ env.KERNEL_NAME }}-${{ env.BUILD_DATE }}
          restore-keys: ccache-${{ env.KERNEL_NAME }}-

      - name: Build Kernel
        run: |
          make ARCH=${{ env.ARCH }} O=${{ env.OUT_DIR }} ${{ matrix.CONFIG.defconfig }}
          make -j$(nproc) ARCH=${{ env.ARCH }} O=${{ env.OUT_DIR }}

      - name: List kernel build output files
        run: ls -lR "${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot/"

      - name: 💛 Upload Image
        uses: actions/upload-artifact@v4
        with:
          name: "${{ env.KERNEL_NAME }}-${{ env.BUILD_DATE }}-Image"
          path: "${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot/Image"
          if-no-files-found: ignore
          retention-days: 7

  Release:
    name: 📦 GitHub Release
    runs-on: ubuntu-latest
    needs:
      - Read-configuration
      - Build-Kernel
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed to generate changelog

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: release_assets

      - name: Generate changelog
        id: changelog
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            echo "Changelog since $LAST_TAG:" > CHANGELOG.md
            git log $LAST_TAG..HEAD --pretty=format:"- %s (%h)" >> CHANGELOG.md
          else
            echo "No previous tag found, showing all commits:" > CHANGELOG.md
            git log --pretty=format:"- %s (%h)" >> CHANGELOG.md
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "build-${{ needs.Read-configuration.outputs.BUILD_DATE }}"
          name: "Build ${{ needs.Read-configuration.outputs.BUILD_DATE }}"
          draft: false
          prerelease: false
          body_path: CHANGELOG.md
          files: release_assets/**
          
