name: Build Kernel

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  Read-configuration:
    name: üêÇ Parse *.config.json
    runs-on: ubuntu-latest
    outputs:
      CONFIGS: ${{ steps.generate-matrix.outputs.CONFIGS }}
      BUILD_DATE: ${{ steps.generate-builddate.outputs.BUILDDATE }}
    steps:
      - name: üòÑ Checkout
        uses: actions/checkout@v4

      - name: üòÜ Generate Matrix (Multiline Safe)
        id: generate-matrix
        run: |
          configs=$(jq -c -s 'add' Kernel/configs/*.config.json)
          echo "CONFIGS<<EOF" >> "$GITHUB_OUTPUT"
          echo "$configs" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      - name: Debug generated matrix JSON
        run: |
          echo "Matrix JSON output:"
          echo '${{ steps.generate-matrix.outputs.CONFIGS }}' | jq .
    

      - name: ‚è∞ Set builddate
        id: generate-builddate
        run: echo "BUILDDATE=$(date +'%Y%m%d')" >> "$GITHUB_OUTPUT"

  Build-Kernel:
    name: üõ†Ô∏è Build ${{ matrix.CONFIG.kernelSource.name }}
    runs-on: ubuntu-latest
    needs: Read-configuration
    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        CONFIG: ${{ fromJSON(needs.Read-configuration.outputs.CONFIGS) }}
    env:
      BUILD_DATE: "${{ needs.Read-configuration.outputs.BUILD_DATE }}"
      KERNEL_NAME: "${{ matrix.CONFIG.kernelSource.name }}"
      ARCH: "${{ matrix.CONFIG.params.ARCH }}"
      OUT_DIR: out
      ENABLE_CCACHE: "${{ matrix.CONFIG.enableCcache }}"
    steps:
      - name: Checkout Kernel Source
        run: |
          git clone --depth 1 -b "${{ matrix.CONFIG.kernelSource.branch }}" \
            "${{ matrix.CONFIG.kernelSource.repo }}" kernel_source

      - name: Install prerequisites
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential bc bison flex libssl-dev \
            libncurses5-dev ccache lzop curl zip unzip jq

      - name: Enable ccache
        if: ${{ env.ENABLE_CCACHE && env.ENABLE_CCACHE == 'true' }}
        run: |
          echo "CCACHE_DIR=${{ github.workspace }}/.ccache" >> "$GITHUB_ENV"
          export PATH="/usr/lib/ccache:$PATH"

      - name: Cache ccache
        if: ${{ env.ENABLE_CCACHE && env.ENABLE_CCACHE == 'true' }}
        uses: actions/cache@v4
        with:
          path: .ccache
          key: ccache-${{ env.KERNEL_NAME }}-${{ env.BUILD_DATE }}
          restore-keys: ccache-${{ env.KERNEL_NAME }}-

      - name: Setup Toolchains
        run: |
          echo "Setting up toolchains..."
          # Example: adapt this loop based on your JSON
          echo '${{ toJSON(matrix.CONFIG.toolchains) }}' | jq -c '.[]' | while read -r tc; do
            repo=$(echo "$tc" | jq -r '.repo // .url')
            branch=$(echo "$tc" | jq -r '.branch // empty')
            dest="$HOME/$(echo "$tc" | jq -r '.name' | tr ' ' '_')"
            if [ -n "$branch" ] && [ "$branch" != "null" ]; then
              git clone --depth 1 -b "$branch" "$repo" "$dest"
            else
              git clone --depth 1 "$repo" "$dest"
            fi
            export PATH="$dest/bin:$PATH"
          done

      - name: Build Kernel
        working-directory: kernel_source
        run: |
          make ARCH=${{ env.ARCH }} O=${{ env.OUT_DIR }} ${{ matrix.CONFIG.kernelSource.defconfig }}
          make -j$(nproc) ARCH=${{ env.ARCH }} O=${{ env.OUT_DIR }}

      - name: List kernel build output files
        run: ls -lR kernel_source/${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot/

      - name: üíõ Upload Image
        uses: actions/upload-artifact@v4
        with:
          name: "${{ env.KERNEL_NAME }}-${{ env.BUILD_DATE }}-Image"
          path: kernel_source/${{ env }}
          
